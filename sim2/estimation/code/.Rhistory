}
# jags data input
y1 = data[data$status == 1, ]$cases
y0 = data[data$status == 0, ]$cases
jags.dat = list ("y1", "y0")
# fit the model
fit = jags(data = jags.dat, model.file = jags.model,
parameters.to.save = c("diff", "lambda1", "lambda0"),
n.chain = 1, n.iter = 5100, n.burnin = 100, n.thin = 1)
summary(post.samp[,3])
# extract the results
fit.mcmc = as.mcmc(fit)
post.samp = as.matrix (fit.mcmc)
summary (fit.mcmc)
# jags model
jags.model = function(){
# poisson model for intervene group
for (i in 1:50){
y1[i] ~ dpois(lambda1)
}
# poisson model for non-intervene group
for (i in 1:50){
y0[i] ~ dpois(lambda0)
}
# prior distribution: vague prior
lambda1 ~ dgamma(0.001, 0.001)
lambda0 ~ dgamma(0.001, 0.001)
# save parameter
diff = lambda0 - lambda1
}
# jags data input
y1 = data[data$status == 1, ]$cases
y0 = data[data$status == 0, ]$cases
jags.dat = list ("y1", "y0")
# fit the model
fit = jags(data = jags.dat, model.file = jags.model,
parameters.to.save = c("diff", "lambda1", "lambda0"),
n.chain = 1, n.iter = 5100, n.burnin = 100, n.thin = 1)
# extract the results
fit.mcmc = as.mcmc(fit)
post.samp = as.matrix (fit.mcmc)
summary (fit.mcmc)
summary(post.samp[,2])
summary(post.samp[,4])
# mean cases in intervene group
mean(data[data$status == 1,]$cases)  # 7.18
summary(post.samp[,3])
# mean cases in the non-intervene group
mean(data[data$status == 0,]$cases)  # 8.4
# jags model
jags.model = function(){
# negative-binomial distribution for intervene group
for (i in 1:50){
y1[i] ~ dnegbin(p1, r1)
}
# negative-binomial distributionfor non-intervene group
for (i in 1:50){
y0[i] ~ dnegbin(p0, r0)
}
# prior distribution: vague prior
p1 ~ dbeta(1,1)
p0 ~ dbeta(1,1)
r1 ~ dgamma(0.001, 0.001)
r0 ~ dgamma(0.001, 0.001)
# save parameter
diff = p0*r0/(1-p0) - p1*r1/(1-p1)
}
# jags data input
y1 = data[data$status == 1, ]$cases
y0 = data[data$status == 0, ]$cases
jags.dat = list ("y1", "y0")
# fit the model
fit = jags(data = jags.dat, model.file = jags.model,
parameters.to.save = c("diff", "p1", "p0", "r1", "r0"),
n.chain = 1, n.iter = 5100, n.burnin = 100, n.thin = 1)
# extract the results
fit.mcmc = as.mcmc(fit)
post.samp = as.matrix (fit.mcmc)
summary (fit.mcmc)
# fit the model
fit = jags(data = jags.dat, model.file = jags.model,
parameters.to.save = c("diff", "p1", "p0", "r1", "r0"),
n.chain = 1, n.iter = 11000, n.burnin = 1000, n.thin = 1)
# extract the results
fit.mcmc = as.mcmc(fit)
post.samp = as.matrix (fit.mcmc)
summary (fit.mcmc)
plot(density(y1))
# jags model
jags.model = function(){
# negative-binomial distribution for intervene group
for (i in 1:50){
y1[i] ~ dnegbin(p1, r1)
}
# negative-binomial distributionfor non-intervene group
for (i in 1:50){
y0[i] ~ dnegbin(p0, r0)
}
# prior distribution: vague prior
p1 ~ dbeta(1,1)
p0 ~ dbeta(1,1)
r1 ~ dgamma(0.001, 0.001)
r0 ~ dgamma(0.001, 0.001)
# save parameter
diff = p0*r0/(1-p0) - p1*r1/(1-p1)
}
# jags data input
y1 = data[data$status == 1, ]$cases
y0 = data[data$status == 0, ]$cases
jags.dat = list ("y1", "y0")
# fit the model
fit = jags(data = jags.dat, model.file = jags.model,
parameters.to.save = c("diff", "p1", "p0", "r1", "r0"),
n.chain = 1, n.iter = 5100, n.burnin = 100, n.thin = 1)
# extract the results
fit.mcmc = as.mcmc(fit)
post.samp = as.matrix (fit.mcmc)
summary (fit.mcmc)
# fit the model
fit = jags(data = jags.dat, model.file = jags.model,
parameters.to.save = c("diff", "p1", "p0", "r1", "r0"),
n.chain = 1, n.iter = 5100, n.burnin = 1000, n.thin = 1)
# extract the results
fit.mcmc = as.mcmc(fit)
post.samp = as.matrix (fit.mcmc)
summary (fit.mcmc)
# jags model
jags.model = function(){
# poisson model for intervene group
for (i in 1:50){
y1[i] ~ dpois(lambda1)
}
# poisson model for non-intervene group
for (i in 1:50){
y0[i] ~ dpois(lambda0)
}
# prior distribution: vague prior
lambda1 ~ dgamma(0.001, 0.001)
lambda0 ~ dgamma(0.001, 0.001)
# save parameter
diff = lambda0 - lambda1
}
# jags data input
y1 = data[data$status == 1, ]$cases
y0 = data[data$status == 0, ]$cases
jags.dat = list ("y1", "y0")
# fit the model
fit = jags(data = jags.dat, model.file = jags.model,
parameters.to.save = c("diff", "lambda1", "lambda0"),
n.chain = 1, n.iter = 5100, n.burnin = 100, n.thin = 1)
# extract the results
fit.mcmc = as.mcmc(fit)
post.samp = as.matrix (fit.mcmc)
summary (fit.mcmc)
# jags model
jags.model = function(){
# negative-binomial distribution for intervene group
for (i in 1:50){
y1[i] ~ dnegbin(p1, r1)
}
# negative-binomial distributionfor non-intervene group
for (i in 1:50){
y0[i] ~ dnegbin(p0, r0)
}
# prior distribution: vague prior
p1 ~ dbeta(1,1)
p0 ~ dbeta(1,1)
r1 ~ dgamma(0.001, 0.001)
r0 ~ dgamma(0.001, 0.001)
# save parameter
diff = (1-p0)*r0/p0 - (1-p1)*r1/p1
}
# jags data input
y1 = data[data$status == 1, ]$cases
y0 = data[data$status == 0, ]$cases
jags.dat = list ("y1", "y0")
# fit the model
fit = jags(data = jags.dat, model.file = jags.model,
parameters.to.save = c("diff", "p1", "p0", "r1", "r0"),
n.chain = 1, n.iter = 5100, n.burnin = 100, n.thin = 1)
# extract the results
fit.mcmc = as.mcmc(fit)
post.samp = as.matrix (fit.mcmc)
summary (fit.mcmc)
# jags model
jags.model = function(){
# negative-binomial distribution for intervene group
for (i in 1:50){
y1[i] ~ dnegbin(p1, r1)
}
# negative-binomial distributionfor non-intervene group
for (i in 1:50){
y0[i] ~ dnegbin(p0, r0)
}
# prior distribution: vague prior
p1 ~ dbeta(1,1)
p0 ~ dbeta(1,1)
r1 ~ dgamma(0.001, 0.001)
r0 ~ dgamma(0.001, 0.001)
# save parameter
diff = (1-p0)*r0/p0 - (1-p1)*r1/p1
}
# jags data input
y1 = data[data$status == 1, ]$cases
y0 = data[data$status == 0, ]$cases
jags.dat = list ("y1", "y0")
# fit the model
fit = jags(data = jags.dat, model.file = jags.model,
parameters.to.save = c("diff", "p1", "p0", "r1", "r0"),
n.chain = 1, n.iter = 5100, n.burnin = 100, n.thin = 1)
# extract the results
fit.mcmc = as.mcmc(fit)
post.samp = as.matrix (fit.mcmc)
summary (fit.mcmc)
summary(post.samp[,2])
# jags model
jags.model = function(){
# negative-binomial distribution for intervene group
for (i in 1:50){
y1[i] ~ dnegbin(p1, r1)
}
# negative-binomial distributionfor non-intervene group
for (i in 1:50){
y0[i] ~ dnegbin(p0, r0)
}
# prior distribution: vague prior
p1 ~ dbeta(1,1)
p0 ~ dbeta(1,1)
r1 ~ dgamma(0.001, 0.001)
r0 ~ dgamma(0.001, 0.001)
# save parameter
avg1 = (1-p0)*r0/p0
avg0 = (1-p1)*r1/p1
diff = avg1 - avg0
}
# jags data input
y1 = data[data$status == 1, ]$cases
y0 = data[data$status == 0, ]$cases
jags.dat = list ("y1", "y0")
# fit the model
fit = jags(data = jags.dat, model.file = jags.model,
parameters.to.save = c("diff", "p1", "p0", "r1", "r0", "avg1", "avg0"),
n.chain = 1, n.iter = 5100, n.burnin = 100, n.thin = 1)
# extract the results
fit.mcmc = as.mcmc(fit)
post.samp = as.matrix (fit.mcmc)
summary (fit.mcmc)
# jags model
jags.model = function(){
# negative-binomial distribution for intervene group
for (i in 1:50){
y1[i] ~ dnegbin(p1, r1)
}
# negative-binomial distributionfor non-intervene group
for (i in 1:50){
y0[i] ~ dnegbin(p0, r0)
}
# prior distribution: vague prior
p1 ~ dbeta(1,1)
p0 ~ dbeta(1,1)
r1 ~ dgamma(0.001, 0.001)
r0 ~ dgamma(0.001, 0.001)
# save parameter
avg1 = (1-p0)*r0/p0
avg0 = (1-p1)*r1/p1
diff = avg1 - avg0
}
# jags data input
y1 = data[data$status == 1, ]$cases
y0 = data[data$status == 0, ]$cases
jags.dat = list ("y1", "y0")
# fit the model
fit = jags(data = jags.dat, model.file = jags.model,
parameters.to.save = c("diff", "p1", "p0", "r1", "r0", "avg1", "avg0"),
n.chain = 1, n.iter = 5100, n.burnin = 100, n.thin = 1)
# extract the results
fit.mcmc = as.mcmc(fit)
post.samp = as.matrix (fit.mcmc)
summary (fit.mcmc)
apply(post.samp. MARGIN = 2, mean)
apply(post.samp, MARGIN = 2, mean)
# jags model
jags.model = function(){
# negative-binomial distribution for intervene group
for (i in 1:50){
y1[i] ~ dnegbin(p1, r1)
}
# negative-binomial distributionfor non-intervene group
for (i in 1:50){
y0[i] ~ dnegbin(p0, r0)
}
# prior distribution: vague prior
p1 ~ dbeta(1,1)
p0 ~ dbeta(1,1)
r1 ~ dgamma(0.001, 0.001)
r0 ~ dgamma(0.001, 0.001)
# save parameter
avg1 = (1-p0)*r0/p0
avg0 = (1-p1)*r1/p1
diff = avg1 - avg0
}
# jags data input
y1 = data[data$status == 1, ]$cases
y0 = data[data$status == 0, ]$cases
jags.dat = list ("y1", "y0")
# fit the model
fit = jags(data = jags.dat, model.file = jags.model,
parameters.to.save = c("diff", "p1", "p0", "r1", "r0", "avg1", "avg0"),
n.chain = 1, n.iter = 5100, n.burnin = 100, n.thin = 1)
# extract the results
fit.mcmc = as.mcmc(fit)
post.samp = as.matrix (fit.mcmc)
summary (fit.mcmc)
apply(post.samp, MARGIN = 2, mean)
# jags model
jags.model = function(){
# negative-binomial distribution for intervene group
for (i in 1:50){
y1[i] ~ dnegbin(p1, r1)
}
# negative-binomial distributionfor non-intervene group
for (i in 1:50){
y0[i] ~ dnegbin(p0, r0)
}
# prior distribution: vague prior
p1 ~ dbeta(1,1)
p0 ~ dbeta(1,1)
r1 ~ dgamma(0.001, 0.001)
r0 ~ dgamma(0.001, 0.001)
# save parameter
avg1 = (1-p0)*r0/p0
avg0 = (1-p1)*r1/p1
diff = avg1 - avg0
}
# jags data input
y1 = data[data$status == 1, ]$cases
y0 = data[data$status == 0, ]$cases
jags.dat = list ("y1", "y0")
# fit the model
fit = jags(data = jags.dat, model.file = jags.model,
parameters.to.save = c("diff", "p1", "p0", "r1", "r0", "avg1", "avg0"),
n.chain = 1, n.iter = 5100, n.burnin = 100, n.thin = 1)
# extract the results
fit.mcmc = as.mcmc(fit)
post.samp = as.matrix (fit.mcmc)
summary (fit.mcmc)
apply(post.samp, MARGIN = 2, mean)
# jags model
jags.model = function(){
# negative-binomial distribution for intervene group
for (i in 1:50){
y1[i] ~ dnegbin(p1, r1)
}
# negative-binomial distributionfor non-intervene group
for (i in 1:50){
y0[i] ~ dnegbin(p0, r0)
}
# prior distribution: vague prior
p1 ~ dbeta(1,1)
p0 ~ dbeta(1,1)
r1 ~ dgamma(0.001, 0.001)
r0 ~ dgamma(0.001, 0.001)
# save parameter
avg0 = (1-p0)*r0/p0
avg1 = (1-p1)*r1/p1
diff = avg0 - avg1
}
# jags data input
y1 = data[data$status == 1, ]$cases
y0 = data[data$status == 0, ]$cases
jags.dat = list ("y1", "y0")
# fit the model
fit = jags(data = jags.dat, model.file = jags.model,
parameters.to.save = c("diff", "p1", "p0", "r1", "r0", "avg1", "avg0"),
n.chain = 1, n.iter = 5100, n.burnin = 100, n.thin = 1)
# extract the results
fit.mcmc = as.mcmc(fit)
post.samp = as.matrix (fit.mcmc)
summary (fit.mcmc)
# jags model
jags.model = function(){
# negative-binomial distribution for intervene group
for (i in 1:50){
y1[i] ~ dnegbin(p1, r1)
}
# negative-binomial distributionfor non-intervene group
for (i in 1:50){
y0[i] ~ dnegbin(p0, r0)
}
# prior distribution: vague prior
p1 ~ dbeta(1,1)
p0 ~ dbeta(1,1)
r1 ~ dgamma(0.001, 0.001)
r0 ~ dgamma(0.001, 0.001)
# save parameter
avg0 = (1-p0)*r0/p0
avg1 = (1-p1)*r1/p1
diff = avg0 - avg1
}
# jags data input
y1 = data[data$status == 1, ]$cases
y0 = data[data$status == 0, ]$cases
jags.dat = list ("y1", "y0")
# fit the model
fit = jags(data = jags.dat, model.file = jags.model,
parameters.to.save = c("diff", "p1", "p0", "r1", "r0", "avg1", "avg0"),
n.chain = 1, n.iter = 5100, n.burnin = 100, n.thin = 1)
# extract the results
fit.mcmc = as.mcmc(fit)
post.samp = as.matrix (fit.mcmc)
summary (fit.mcmc)
# jags model
jags.model = function(){
# negative-binomial distribution for intervene group
for (i in 1:50){
y1[i] ~ dnegbin(p1, r1)
}
# negative-binomial distributionfor non-intervene group
for (i in 1:50){
y0[i] ~ dnegbin(p0, r0)
}
# prior distribution: vague prior
p1 ~ dbeta(1,1)
p0 ~ dbeta(1,1)
r1 ~ dgamma(0.001, 0.001)
r0 ~ dgamma(0.001, 0.001)
# save parameter
avg0 = (1-p0)*r0/p0
avg1 = (1-p1)*r1/p1
diff = avg0 - avg1
}
# jags data input
y1 = data[data$status == 1, ]$cases
y0 = data[data$status == 0, ]$cases
jags.dat = list ("y1", "y0")
# fit the model
fit = jags(data = jags.dat, model.file = jags.model,
parameters.to.save = c("diff", "p1", "p0", "r1", "r0", "avg1", "avg0"),
n.chain = 1, n.iter = 5100, n.burnin = 100, n.thin = 1)
# extract the results
fit.mcmc = as.mcmc(fit)
post.samp = as.matrix (fit.mcmc)
summary (fit.mcmc)
# jags model
jags.model = function(){
# negative-binomial distribution for intervene group
for (i in 1:50){
y1[i] ~ dnegbin(p1, r1)
}
# negative-binomial distributionfor non-intervene group
for (i in 1:50){
y0[i] ~ dnegbin(p0, r0)
}
# prior distribution: vague prior
p1 ~ dbeta(1,1)
p0 ~ dbeta(1,1)
r1 ~ dgamma(0.001, 0.001)
r0 ~ dgamma(0.001, 0.001)
# save parameter
avg0 = (1-p0)*r0/p0
avg1 = (1-p1)*r1/p1
diff = avg0 - avg1
}
# jags data input
y1 = data[data$status == 1, ]$cases
y0 = data[data$status == 0, ]$cases
jags.dat = list ("y1", "y0")
# fit the model
fit = jags(data = jags.dat, model.file = jags.model,
parameters.to.save = c("diff", "p1", "p0", "r1", "r0", "avg1", "avg0"),
n.chain = 1, n.iter = 5100, n.burnin = 100, n.thin = 1)
# extract the results
fit.mcmc = as.mcmc(fit)
post.samp = as.matrix (fit.mcmc)
summary (fit.mcmc)
# jags model
jags.model = function(){
# poisson model for intervene group
for (i in 1:50){
y1[i] ~ dpois(lambda1)
}
# poisson model for non-intervene group
for (i in 1:50){
y0[i] ~ dpois(lambda0)
}
# prior distribution: vague prior
lambda1 ~ dgamma(0.001, 0.001)
lambda0 ~ dgamma(0.001, 0.001)
# save parameter
diff = lambda0 - lambda1
}
# jags data input
y1 = data[data$status == 1, ]$cases
y0 = data[data$status == 0, ]$cases
jags.dat = list ("y1", "y0")
# fit the model
fit = jags(data = jags.dat, model.file = jags.model,
parameters.to.save = c("diff", "lambda1", "lambda0"),
n.chain = 1, n.iter = 5100, n.burnin = 100, n.thin = 1)
# extract the results
fit.mcmc = as.mcmc(fit)
post.samp = as.matrix (fit.mcmc)
summary (fit.mcmc)
summary(post.samp[,2])
quantile(post.samp[,2], 0.975)
quantile(post.samp[,2], 0.5)
mean(post.samp[,2])
quantile(post.samp[,2], 0.75)
mean(post.samp[,4])
quantile(post.samp[,4], 0.975)
mean(post.samp[,3])
quantile(post.samp[,3], 0.975)
